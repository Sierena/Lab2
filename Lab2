#!/bin/python3


"""Problem 1
Include the following list month_days.
month_days = [('January',[31]),('February',[28,29]),('March',[31]),('April',[30]),('May',[31]),('June',[30]),('July',[31]),('August',[31]),('September',[30]),('October',[31]),('November',[30]),('December',[31])]
Write a function days_in_month which takes a month as an argument and finds thecorresponding month in the month_days list and returns the list with the number of daysassociated with that month. Where the given month name is not found, return the empty list."""



def days_in_month(month_name):
    # Write your code here
    month_days = [('January',[31]),('February',[28,29]),('March',[31]), ('April',[30]),('May',[31]),('June',[30]),('July',[31]),('August',[31]),('September',[30]),('October',[31]),('November',[30]),('December',[31])]
    for i in month_days:
        if month_name==i[0]:
            return i[1]
    return []
    
   
"""Problem 2
Include the following day_names in your code.
day_names =['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
Zeller’s Congruence is an algorithm for finding the day of the week for any date. Zeller’s formulais as follows:
day = (((13*m+3) / 5 + d + y + (y / 4) - (y / 100) + (y / 400)) %7)

where  d = day, y = year and m = month
Note: If the month is January or February then you add 12 to the month and subtract 1 from theyear before calculating the day. Further, Zeller’s Congruence is deemed to be computed
correctly where the integer value is used for each computation of a division (or number being divided).
The result is a day number in the range 0..6 where the corresponding day can be extracted from the day_names list by using an appropriate index.
e.g. day_names[0] = 'Monday' and day_names[6] = 'Sunday'. Define a python function day_of_week, which displays the day name for a given date supplied in the form (day,month,year).""" 

def day_of_week(d,m,y):
    # Write your code here
    day_names = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
    if m<3:
        m=m+12
        y=y-1
    day = (((13*m+3) // 5 + d + y + (y // 4) - (y // 100) + (y // 400)) %7)
    return day_names[int(day)]


"""Problem 3
Using list comprehension, define a python function unlucky, which returns all the days in a given year which have the date Friday 13th
You need two ranges one for day starting from 1 and going to 31 and another one for month starting from 1 going to 12. Using these and the year which comes as an argument and use the
function day_of_week (Problem 2) in the if part of list comprehension to check if a given date is ‘Friday’ and also check if the day is equal to 13.]"""

def unlucky(yr):
    # Write your code here
    unluck=[(d,m,yr) for d in  range(1,32) for m in range(1,13) if d==13 and day_of_week(d,m,yr)=='Friday']
    return unluck

"""Problem 4
Write a python function mostUnlucky, which lists all the years between a given start year and
end year e.g. years 0 and 2010 which have 3 unlucky days. Use function unlucky (Problem 3) to
get a list of unlucky dates for a particular year and find the length of this list. If the length is
greater than 2 then the year is added to another list which is returned as output."""

def mostUnlucky(start_year, end_year):
    # Write your code here
    luck=[]
    for i in range(start_year,end_year):
        if len(unlucky(i))>=3:
            luck=luck+[i]
    return luck


